# Configuration Service Settings
LogLevel: "debug"
IP: "%_IP_ADDR_%"
Database:
  Server: "db"
  Port: 5432
  Username: "example"
  Password: "%_PW_POSTGRES_%"
  Database: "example"
  Driver: "postgres"
  HostIP: "%_IP_ADDR_%"
  HostPort: 15432
  Releases : "https://raw.githubusercontent.com/IAE-BigObject/SQL/main/sys_db_releases_evo.yml"
StreamerX:
  Server: "localhost"
  Port: 9089
Debug: false
DockerCompose:
  RequiredVersion: "docker-compose version 1.29"
  DockerSwarmLeader: "%_IP_ADDR_%"
# Iris Settings
Iris:
  # DisableStartupLog if setted to true then it turns off the write banner on server startup.
  #
  # Defaults to false.
  DisableStartupLog: true

  # DisableInterruptHandler if setted to true then it disables the automatic graceful server shutdown
  # when control/cmd+C pressed.
  # Turn this to true if you're planning to handle this by your own via a custom host.Task.
  #
  # Defaults to false.
  DisableInterruptHandler: false

  # DisablePathCorrection corrects and redirects or executes directly the handler of
  # the requested path to the registered path
  # for example, if /home/ path is requested but no handler for this Route found,
  # then the Router checks if /home handler exists, if yes,
  # (permant)redirects the client to the correct path /home.
  #
  # See `DisablePathCorrectionRedirection` to enable direct handler execution instead of redirection.
  #
  # Defaults to false.
  DisablePathCorrection: false

  # DisablePathCorrectionRedirection works whenever configuration.DisablePathCorrection is set to false
  # and if DisablePathCorrectionRedirection set to true then it will fire the handler of the matching route without
  # the last slash ("/") instead of send a redirection status.
  #
  # Defaults to false.
  DisablePathCorrectionRedirection: false

  # EnablePathEscape when is true then its escapes the path, the named parameters (if any).
  # Change to false it if you want something like this https://github.com/kataras/iris/issues/135 to work
  #
  # When do you need to Disable(false) it:
  # accepts parameters with slash '/'
  # Request: http://localhost:8080/details/Project%2FDelta
  # ctx.Param("project") returns the raw named parameter: Project%2FDelta
  # which you can escape it manually with net/url:
  # projectName, _ := url.QueryUnescape(c.Param("project").
  #
  # Defaults to false.
  EnablePathEscape: false

  # EnableOptimization when this field is true
  # then the application tries to optimize for the best performance where is possible.
  #
  # Defaults to false.
  EnableOptimizations: false

  # FireMethodNotAllowed if it's true router checks for StatusMethodNotAllowed(405) and
  #  fires the 405 error instead of 404
  # Defaults to false.
  FireMethodNotAllowed: false

  # DisableBodyConsumptionOnUnmarshal manages the reading behavior of the context's body readers/binders.
  # If setted to true then it
  # disables the body consumption by the `context.UnmarshalBody/ReadJSON/ReadXML`.
  #
  # By-default io.ReadAll` is used to read the body from the `context.Request.Body which is an `io.ReadCloser`,
  # if this field setted to true then a new buffer will be created to read from and the request body.
  # The body will not be changed and existing data before the
  # context.UnmarshalBody/ReadJSON/ReadXML will be not consumed.
  DisableBodyConsumptionOnUnmarshal: true

  # DisableAutoFireStatusCode if true then it turns off the http error status code handler automatic execution
  # from (`context.StatusCodeNotSuccessful`, defaults to < 200 || >= 400).
  # If that is false then for a direct error firing, then call the "context#FireStatusCode(statusCode)" manually.
  #
  # By-default a custom http error handler will be fired when "context.StatusCode(code)" called,
  # code should be equal with the result of the the `context.StatusCodeNotSuccessful` in order to be received as an "http error handler".
  #
  # Developer may want this option to setted as true in order to manually call the
  # error handlers when needed via "context#FireStatusCode(< 200 || >= 400)".
  # HTTP Custom error handlers are being registered via app.OnErrorCode(code, handler)".
  #
  # Defaults to false.
  DisableAutoFireStatusCode: false

  # TimeFormat time format for any kind of datetime parsing
  # Defaults to  "Mon, 02 Jan 2006 15:04:05 GMT".
  TimeFormat: Mon, 01 Jan 2006 15:04:05 GMT

  # Charset character encoding for various rendering
  # used for templates and the rest of the responses
  # Defaults to "UTF-8".
  Charset: UTF-8

  # PostMaxMemory sets the maximum post data size
  # that a client can send to the server, this differs
  # from the overral request body size which can be modified
  # by the `context#SetMaxRequestBodySize` or `iris#LimitRequestBodySize`.
  #
  # Defaults to 32MB or 32 << 20 if you prefer.
  PostMaxMemory: 32

  #  +----------------------------------------------------+
  #  | Context's keys for values used on various featuers |
  #  +----------------------------------------------------+
  # Context values' keys for various features.
  #
  # TranslateLanguageContextKey & TranslateFunctionContextKey are used by i18n handlers/middleware
  # currently we have only one: https://github.com/kataras/iris/tree/master/middleware/i18n.
  #
  # Defaults to "iris.translate" and "iris.language"
  TranslateFunctionContextKey: "iris.translate"

  # TranslateLanguageContextKey used for i18n.
  #
  # Defaults to "iris.language"
  TranslateLanguageContextKey: "iris.language"

  # GetViewLayoutContextKey is the key of the context's user values' key
  # which is being used to set the template
  # layout from a middleware or the main handler.
  # Overrides the parent's or the configuration's.
  #
  # Defaults to "iris.ViewLayout"
  ViewLayoutContextKey: "iris.ViewLayout"

  # GetViewDataContextKey is the key of the context's user values' key
  # which is being used to set the template
  # binding data from a middleware or the main handler.
  #
  # Defaults to "iris.viewData"
  ViewDataContextKey: "iris.viewData"

  # RemoteAddrHeaders are the allowed request headers names
  # that can be valid to parse the client's IP based on.
  # By-default no "X-" header is consired safe to be used for retrieving the
  # client's IP address, because those headers can manually change by
  # the client. But sometimes are useful e.g., when behind a proxy
  # you want to enable the "X-Forwarded-For" or when cloudflare
  # you want to enable the "CF-Connecting-IP", inneed you
  # can allow the `ctx.RemoteAddr()` to use any header
  # that the client may sent.
  #
  # Defaults to an empty map but an example usage is:
  # RemoteAddrHeaders {
  #	  "X-Real-Ip":        true,
  #   "X-Forwarded-For":  true,
  # 	"CF-Connecting-IP": true,
  #	}
  #
  # Look `context.RemoteAddr()` for more.
  # RemoteAddrHeaders:
  #  X-Real-Ip: true
  #  X-Forwarded-For: true
  #  CF-Connecting-IP: true
